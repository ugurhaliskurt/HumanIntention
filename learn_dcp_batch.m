% function to learn a DCP in batch mode using a minimum jerk trajectory as% template% This code was modified by Ugur Halis Kurtfunction [weights] = learn_dcp_batch(input, time,kernel_number,goal)global dcps;% general parameterstime = time/1000.0dt        = 0.01;goal      = goaltau       = time;n_rfs     = kernel_number;ID        = 1;% initialize DMPdcp('clear',ID);dcp('init',ID,n_rfs,'minJerk_dcp',1);% initialize some variables for plottingZ=zeros(floor(2*tau/dt+1),2);X=Z;V=Z;T=zeros(floor(2*tau/dt+1),3);Y=T;PSI=zeros(floor(2*tau/dt+1),n_rfs);W=PSI;% generate the minimum jerk trajectoryt=0;td=0;tdd=0;T = input;% use the in-built function to initialize the dcp with minjerkdcp('Batch_Fit',ID,tau,dt,T(:,1),T(:,2),T(:,3));% test the fitdcp('reset_state',ID);dcp('set_goal',ID,goal,1);for i=0:2*tau/dt,    [y,yd,ydd]=dcp('run',ID,tau,dt);    Z(i+1,:)   = [dcps(ID).z dcps(ID).zd];  Y(i+1,:)   = [y yd ydd];  X(i+1,:)   = [dcps(ID).x dcps(ID).xd];  V(i+1,:)   = [dcps(ID).v dcps(ID).vd];  PSI(i+1,:) = dcps(ID).psi';  W(i+1,:)   = dcps(ID).w';  end; % plottingtime = (0:dt:tau*2)';weights = W;figure(1);clf;% plot position, velocity, acceleration vs. targetsubplot(231);plot(time,[Y(:,1) T(:,1)]);title('y');aa=axis;axis([min(time) max(time) aa(3:4)]);subplot(232);plot(time,[Y(:,2) T(:,2)]);title('yd');aa=axis;axis([min(time) max(time) aa(3:4)]);subplot(233);plot(time,[Y(:,3) T(:,3)]);title('ydd');aa=axis;axis([min(time) max(time) aa(3:4)]);% plot internal statessubplot(234);plot(time,X(:,1));title('x');aa=axis;axis([min(time) max(time) aa(3:4)]);subplot(235);plot(time,X(:,2));title('xd');aa=axis;axis([min(time) max(time) aa(3:4)]);subplot(236);plot(time,PSI);title('Weighting Kernels');aa=axis;axis([min(time) max(time) aa(3:4)]);drawnow;